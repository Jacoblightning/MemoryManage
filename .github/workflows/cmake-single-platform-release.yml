# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform - Release

permissions:
  id-token: write
  contents: read
  attestations: write


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C Release --extra-verbose

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: '${{github.workspace}}/build/src/libMemoryManage*'


    - name: Upload Static Build Artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: 'LibMemoryManageSTATIC-Linux_${{ runner.arch }}'
        path: '${{github.workspace}}/build/src/libMemoryManage.a'
        retention-days: 90
    - name: Upload Dynamic Build Artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: 'LibMemoryManageDYNAMIC-Linux_${{ runner.arch }}'
        path: '${{github.workspace}}/build/src/libMemoryManage.so'
        retention-days: 90
    - name: Upload Both Build Artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: 'LibMemoryManage-STATIC_AND_DYNAMIC-Linux_${{ runner.arch }}'
        path: '${{github.workspace}}/build/src/libMemoryManage.*'
        retention-days: 90



